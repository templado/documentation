{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Templado Documentation Last Updated: 2023-08-15 Most of today's templating engines mix code for the required rendering logic with HTML markup in one file and require developers to learn their respective language as well as syntax. \u00bbFinally a template engine that does not require learning a new language or syntax.\u00ab Templado follows a different approach on templating: Being in part inspired by Tempan , Templado's main feature - the template rendering - relies solely on plain and standard HTML markup with a subset of RDFa annotations. The limited amount of display logic required is contained within the engine and triggered by the view model or form when being applied to the document. Templado is Open Source, licensed under the BSD 3-Clause License . This documentation covers Templado 5.0 Please follow this link for documentation on Templado 4.x","title":"Templado Documentation"},{"location":"#templado-documentation","text":"Last Updated: 2023-08-15 Most of today's templating engines mix code for the required rendering logic with HTML markup in one file and require developers to learn their respective language as well as syntax.","title":"Templado Documentation"},{"location":"#finally-a-template-engine-that-does-not-require-learning-a-new-language-or-syntax","text":"Templado follows a different approach on templating: Being in part inspired by Tempan , Templado's main feature - the template rendering - relies solely on plain and standard HTML markup with a subset of RDFa annotations. The limited amount of display logic required is contained within the engine and triggered by the view model or form when being applied to the document. Templado is Open Source, licensed under the BSD 3-Clause License .","title":"\u00bbFinally a template engine that does not require learning a new language or syntax.\u00ab"},{"location":"#this-documentation-covers-templado-50please-follow-this-link-for-documentation-on-templado-4x","text":"","title":"This documentation covers Templado 5.0Please follow this link for documentation on Templado 4.x"},{"location":"extend/filter/","text":"","title":"Creating Filters"},{"location":"extend/selectors/","text":"","title":"Creating Selectors"},{"location":"extend/serializer/","text":"","title":"Custom Serialization"},{"location":"extend/transformations/","text":"","title":"Creating Transformations"},{"location":"features/","text":"Motivation Most of today's templating engines mix code for the required rendering logic with HTML markup in one file and require the developers to learn their respective language. Templado follows a different approach on templating: Being in part inspired by Tempan , Templado relies solely on plain HTML markup. The limited amount of display logic required is contained with the engine and triggered by the view model when it's applied to the Page. Always ready to preview As a Templado template is plain HTML, previewing is as easy as opening the HTML file with a browser - example data can and should be included as the engine will clean it up based on the view model upon rendering. No markup duplication Templado features asset support, mapping a list of assets based on their ID into a given HTML Page. To automate this process Templado CLI can be used. Combined with a File watcher in your IDE, you can have an always up-to-date set of HTML pages without ever writing a block twice. Form handling included To make form handling even more easy, Templado comes with explicit HTML Form support. Based on supplied Input data, Templado will repopulate the HTML form and even include your CSRF protection code. Custom transformations and Filters Templado allows for custom transformations, like adding a class to every a tag and string based replacements upon serialization.","title":"Index"},{"location":"features/#motivation","text":"Most of today's templating engines mix code for the required rendering logic with HTML markup in one file and require the developers to learn their respective language. Templado follows a different approach on templating: Being in part inspired by Tempan , Templado relies solely on plain HTML markup. The limited amount of display logic required is contained with the engine and triggered by the view model when it's applied to the Page.","title":"Motivation"},{"location":"features/#always-ready-to-preview","text":"As a Templado template is plain HTML, previewing is as easy as opening the HTML file with a browser - example data can and should be included as the engine will clean it up based on the view model upon rendering.","title":"Always ready to preview"},{"location":"features/#no-markup-duplication","text":"Templado features asset support, mapping a list of assets based on their ID into a given HTML Page. To automate this process Templado CLI can be used. Combined with a File watcher in your IDE, you can have an always up-to-date set of HTML pages without ever writing a block twice.","title":"No markup duplication"},{"location":"features/#form-handling-included","text":"To make form handling even more easy, Templado comes with explicit HTML Form support. Based on supplied Input data, Templado will repopulate the HTML form and even include your CSRF protection code.","title":"Form handling included"},{"location":"features/#custom-transformations-and-filters","text":"Templado allows for custom transformations, like adding a class to every a tag and string based replacements upon serialization.","title":"Custom transformations and Filters"},{"location":"features/filter/","text":"","title":"Filtering"},{"location":"features/forms/","text":"","title":"Form Handling"},{"location":"features/merge/","text":"","title":"Merging Documents"},{"location":"features/serializing/","text":"","title":"Controlling the Serializing"},{"location":"features/transformation/","text":"","title":"Applying Transformations"},{"location":"features/viewmodel/","text":"","title":"View Model Rendering"},{"location":"migrate/templado4/","text":"","title":"Templado 4.x"},{"location":"start/install/","text":"Installation Runtime Requirements Templado merely requires an up-to-date PHP Version with XML and DOM support. So this boils down to the following: PHP >= 8.2.0 Extensions dom libxml Note Please note that when you want to contribute to the development of Templado or if you just want to run the tests or some of the tools used during development of Templado like infection or psalm, additional extensions are required. As this is not a runtime requirement, those are not listed here. Install with Composer Templado is designed to be installed as a library using Composer , the defacto standard to install and manage runtime dependencies for PHP. The easiest way to add Templado to your project is from the CLI: $ composer require templado/engine:^5.0 If you prefer to manually create or edit the composer.json file, please add the following fragment to it. \"require\" : { \"templado/engine\": \"^5.0\" } For Templado, and its dependencies, to be actually installed after manually editing, you'd have to explicitly run composer install .","title":"Installation"},{"location":"start/install/#installation","text":"","title":"Installation"},{"location":"start/install/#runtime-requirements","text":"Templado merely requires an up-to-date PHP Version with XML and DOM support. So this boils down to the following: PHP >= 8.2.0 Extensions dom libxml Note Please note that when you want to contribute to the development of Templado or if you just want to run the tests or some of the tools used during development of Templado like infection or psalm, additional extensions are required. As this is not a runtime requirement, those are not listed here.","title":"Runtime Requirements"},{"location":"start/install/#install-with-composer","text":"Templado is designed to be installed as a library using Composer , the defacto standard to install and manage runtime dependencies for PHP. The easiest way to add Templado to your project is from the CLI: $ composer require templado/engine:^5.0 If you prefer to manually create or edit the composer.json file, please add the following fragment to it. \"require\" : { \"templado/engine\": \"^5.0\" } For Templado, and its dependencies, to be actually installed after manually editing, you'd have to explicitly run composer install .","title":"Install with Composer"},{"location":"start/start/","text":"Getting Started As with any templating engine, the main goal is to pair a template with a data source. Templado uses View Models and HTML templates to accomplish this. So the first thing we need to do is introduce them to each other. Load the Template Markup For Templado to operate, an instance of Document needs to be created. This can be done either from a string - which will then be parsed internally into a DOMDocument or by supplying an already created instance of PHP's DOMDocument . $document = Templado\\Engine\\Document::fromString(' <!DOCTYPE html> <html lang=\"en\" > <head> <title>Hello World, Templado!</title> </head> <body> <h1 property=\"headline\">My First Template</h1> </body> </html> '); Warning As Templado uses PHP's DOMDocument, the markup must be a valid XML string. HTML 5 can be written using the HTML or XML serialization format. LibXML, the underlying engine that powers PHP's DOM support, does not support the HTML serialization format of HTML 5. Templado does, nevertheless, produce valid HTML 5 using its own HTMLSerializer. Applying a View Model Once the Document is available, a View Model can be applied. The above basic HTML example contains a single property attribute, which Templado uses as the method name to fetch an alternative Text body. A basic view Model could look and be applied like this: $document->applyViewModel(new class { public function headline(): string { return 'Hello world!'; } }); print $document->asString( new Templado\\Engine\\HTMLSerializer() );","title":"First Steps"},{"location":"start/start/#getting-started","text":"As with any templating engine, the main goal is to pair a template with a data source. Templado uses View Models and HTML templates to accomplish this. So the first thing we need to do is introduce them to each other.","title":"Getting Started"},{"location":"start/start/#load-the-template-markup","text":"For Templado to operate, an instance of Document needs to be created. This can be done either from a string - which will then be parsed internally into a DOMDocument or by supplying an already created instance of PHP's DOMDocument . $document = Templado\\Engine\\Document::fromString(' <!DOCTYPE html> <html lang=\"en\" > <head> <title>Hello World, Templado!</title> </head> <body> <h1 property=\"headline\">My First Template</h1> </body> </html> '); Warning As Templado uses PHP's DOMDocument, the markup must be a valid XML string. HTML 5 can be written using the HTML or XML serialization format. LibXML, the underlying engine that powers PHP's DOM support, does not support the HTML serialization format of HTML 5. Templado does, nevertheless, produce valid HTML 5 using its own HTMLSerializer.","title":"Load the Template Markup"},{"location":"start/start/#applying-a-view-model","text":"Once the Document is available, a View Model can be applied. The above basic HTML example contains a single property attribute, which Templado uses as the method name to fetch an alternative Text body. A basic view Model could look and be applied like this: $document->applyViewModel(new class { public function headline(): string { return 'Hello world!'; } }); print $document->asString( new Templado\\Engine\\HTMLSerializer() );","title":"Applying a View Model"}]}