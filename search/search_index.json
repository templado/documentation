{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Templado Documentation Last Updated: 2023-08-16 Most of today's templating engines mix code for the required rendering logic with HTML markup in one file and require developers to learn their respective language as well as syntax. \u00bbFinally a template engine that does not require learning a new language or syntax.\u00ab Templado follows a different approach on templating: Being in part inspired by Tempan , Templado's main feature - the template rendering - relies solely on plain and standard HTML markup with a subset of RDFa annotations. The limited amount of display logic required is contained within the engine and triggered by the view model or form when being applied to the document. Templado is Open Source, licensed under the BSD 3-Clause License . This documentation covers Templado 5.0 Please follow this link for documentation on Templado 4.x","title":"Templado Documentation"},{"location":"#templado-documentation","text":"Last Updated: 2023-08-16 Most of today's templating engines mix code for the required rendering logic with HTML markup in one file and require developers to learn their respective language as well as syntax.","title":"Templado Documentation"},{"location":"#finally-a-template-engine-that-does-not-require-learning-a-new-language-or-syntax","text":"Templado follows a different approach on templating: Being in part inspired by Tempan , Templado's main feature - the template rendering - relies solely on plain and standard HTML markup with a subset of RDFa annotations. The limited amount of display logic required is contained within the engine and triggered by the view model or form when being applied to the document. Templado is Open Source, licensed under the BSD 3-Clause License .","title":"\u00bbFinally a template engine that does not require learning a new language or syntax.\u00ab"},{"location":"#this-documentation-covers-templado-50please-follow-this-link-for-documentation-on-templado-4x","text":"","title":"This documentation covers Templado 5.0Please follow this link for documentation on Templado 4.x"},{"location":"first-steps/","text":"Getting Started As with any templating engine, the main goal is to pair a template with a data source. Templado uses View Models and HTML templates to accomplish this. So the first thing we need to do is introduce them to each other. 1. Loading the Template For Templado to operate, we need a Template to work with. From Templado's point of view, every Template is a Document . This can either be a complete HTML page - or just a fragment or snippet. A Templado Document can be instantiated either from a string or by supplying an already created instance of PHP's DOMDocument . For our first steps, we'll be using a String: $document = Templado\\Engine\\Document::fromString(' <!DOCTYPE html> <html lang=\"en\"> <head> <title>Hello World, Templado!</title> </head> <body> <h1 property=\"headline\">My First Template</h1> </body> </html> '); Note While HTML can be represented using either the HTML or the XML serialization format, LibXML 2.x - the underlying engine that powers most of PHP's DOM support - does only support the HTML serialization format up to version 4. For that reason, and to avoid other quirks, Templado uses the XML mode when parsing a string. If you do not want this, feel free to create a DOMDocument by other means and pass that to Templado using the alternative factory method Templado\\Engine\\Document::fromDomDocument . 2. Applying a View Model Once a Document instance is available, a View Model can be applied. Templado relies on RDFa attributes embedded into the HTML to determine which methods to call on the current view model. More details on this, supported attributes and their respective meaning for Templado as well as more complex constructs can be found in the View Models section. The above basic HTML example contains a single RDFa attribute property . Templado uses this attribute, or rather the value of it, as the method name to call on the current view model and to determine what to do. The application of a very basic view Model to change text of the <h1> element could look like this: $document->applyViewModel(new class { public function headline(): string { return 'Hello world!'; } }); The property 's value is \"headline\", thus Templado is going to call the method named \"headline\" on the view model. Given the returned type is a string , the element's text content will be changed. 3. Serializing back to HTML Given the above sample model, Templado will replace the original text ('My First Template') with 'Hello world!'. To verify our success, we can have Templado serialize the Document back to HTML for us. We'll do so by using Templado's HTML Serializer. More on the serializer support can be found in the Serializer section. The HTML Serializer used here will ensure we produce sane HTML 5 output, despite the fact we use the XML mode internally: print $document->asString( new Templado\\Engine\\HTMLSerializer() ); The above should produce this output: <!DOCTYPE html> <html lang=\"en\"> <head> <title>Hello World, Templado!</title> </head> <body> <h1 property=\"headline\">Hello world!</h1> </body> </html> Congratulations, you just rendered your first HTML page using Templado!","title":"First Steps"},{"location":"first-steps/#getting-started","text":"As with any templating engine, the main goal is to pair a template with a data source. Templado uses View Models and HTML templates to accomplish this. So the first thing we need to do is introduce them to each other.","title":"Getting Started"},{"location":"first-steps/#1-loading-the-template","text":"For Templado to operate, we need a Template to work with. From Templado's point of view, every Template is a Document . This can either be a complete HTML page - or just a fragment or snippet. A Templado Document can be instantiated either from a string or by supplying an already created instance of PHP's DOMDocument . For our first steps, we'll be using a String: $document = Templado\\Engine\\Document::fromString(' <!DOCTYPE html> <html lang=\"en\"> <head> <title>Hello World, Templado!</title> </head> <body> <h1 property=\"headline\">My First Template</h1> </body> </html> '); Note While HTML can be represented using either the HTML or the XML serialization format, LibXML 2.x - the underlying engine that powers most of PHP's DOM support - does only support the HTML serialization format up to version 4. For that reason, and to avoid other quirks, Templado uses the XML mode when parsing a string. If you do not want this, feel free to create a DOMDocument by other means and pass that to Templado using the alternative factory method Templado\\Engine\\Document::fromDomDocument .","title":"1. Loading the Template"},{"location":"first-steps/#2-applying-a-view-model","text":"Once a Document instance is available, a View Model can be applied. Templado relies on RDFa attributes embedded into the HTML to determine which methods to call on the current view model. More details on this, supported attributes and their respective meaning for Templado as well as more complex constructs can be found in the View Models section. The above basic HTML example contains a single RDFa attribute property . Templado uses this attribute, or rather the value of it, as the method name to call on the current view model and to determine what to do. The application of a very basic view Model to change text of the <h1> element could look like this: $document->applyViewModel(new class { public function headline(): string { return 'Hello world!'; } }); The property 's value is \"headline\", thus Templado is going to call the method named \"headline\" on the view model. Given the returned type is a string , the element's text content will be changed.","title":"2. Applying a View Model"},{"location":"first-steps/#3-serializing-back-to-html","text":"Given the above sample model, Templado will replace the original text ('My First Template') with 'Hello world!'. To verify our success, we can have Templado serialize the Document back to HTML for us. We'll do so by using Templado's HTML Serializer. More on the serializer support can be found in the Serializer section. The HTML Serializer used here will ensure we produce sane HTML 5 output, despite the fact we use the XML mode internally: print $document->asString( new Templado\\Engine\\HTMLSerializer() ); The above should produce this output: <!DOCTYPE html> <html lang=\"en\"> <head> <title>Hello World, Templado!</title> </head> <body> <h1 property=\"headline\">Hello world!</h1> </body> </html> Congratulations, you just rendered your first HTML page using Templado!","title":"3. Serializing back to HTML"},{"location":"install/","text":"Installation Runtime Requirements Templado merely requires an up-to-date PHP Version with XML and DOM support. So this boils down to the following: PHP >= 8.2.0 Extensions dom libxml Note Please note that when you want to contribute to the development of Templado or if you just want to run the tests or some of the tools used during development of Templado like infection or psalm, additional extensions are required. As this is not a runtime requirement, those are not listed here. Install with Composer Templado is designed to be installed as a library using Composer , the defacto standard to install and manage runtime dependencies for PHP. The easiest way to add Templado to your project is from the CLI: $ composer require templado/engine:^5.0 If you prefer to manually create or edit the composer.json file, please add the following fragment to it. \"require\" : { \"templado/engine\": \"^5.0\" } For Templado, and its dependencies, to be actually installed after manually editing, you'd have to explicitly run composer install . Manual Installation If you do not want to or cannot use Composer for some reason, a manual installation is of course also possible. Keep in mind that you are fully responsible to manage a potential upgrade, dependency resoling and autoloading. If you still insist on a manual installation, feel free to clone the source repository, and switch to whatever is the latest 5.x release tag. For instance: git clone git@github.com:templado/engine.git && cd engine && git switch 5.x.y For the CSSSelector to work, you need to additionally install theseer\\css2xpath : git clone git@github.com:theseer/css2xpath.git Note As you opted for not using Composer, no autoloader has been generated yet. Please update your autoloader accordingly, so the newly installed classes and interfaces can be found. Warning While of course technically possible, using a manual installation is not supported. If you run into any issues with Templado, please ensure the problem is reproducible using a composer based installation before reporting it.","title":"Installation"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#runtime-requirements","text":"Templado merely requires an up-to-date PHP Version with XML and DOM support. So this boils down to the following: PHP >= 8.2.0 Extensions dom libxml Note Please note that when you want to contribute to the development of Templado or if you just want to run the tests or some of the tools used during development of Templado like infection or psalm, additional extensions are required. As this is not a runtime requirement, those are not listed here.","title":"Runtime Requirements"},{"location":"install/#install-with-composer","text":"Templado is designed to be installed as a library using Composer , the defacto standard to install and manage runtime dependencies for PHP. The easiest way to add Templado to your project is from the CLI: $ composer require templado/engine:^5.0 If you prefer to manually create or edit the composer.json file, please add the following fragment to it. \"require\" : { \"templado/engine\": \"^5.0\" } For Templado, and its dependencies, to be actually installed after manually editing, you'd have to explicitly run composer install .","title":"Install with Composer"},{"location":"install/#manual-installation","text":"If you do not want to or cannot use Composer for some reason, a manual installation is of course also possible. Keep in mind that you are fully responsible to manage a potential upgrade, dependency resoling and autoloading. If you still insist on a manual installation, feel free to clone the source repository, and switch to whatever is the latest 5.x release tag. For instance: git clone git@github.com:templado/engine.git && cd engine && git switch 5.x.y For the CSSSelector to work, you need to additionally install theseer\\css2xpath : git clone git@github.com:theseer/css2xpath.git Note As you opted for not using Composer, no autoloader has been generated yet. Please update your autoloader accordingly, so the newly installed classes and interfaces can be found. Warning While of course technically possible, using a manual installation is not supported. If you run into any issues with Templado, please ensure the problem is reproducible using a composer based installation before reporting it.","title":"Manual Installation"},{"location":"extend/filters/","text":"","title":"Creating Filters"},{"location":"extend/selectors/","text":"","title":"Creating Selectors"},{"location":"extend/serializers/","text":"","title":"Custom Serialization"},{"location":"extend/transformations/","text":"","title":"Creating Transformations"},{"location":"features/form-handling/","text":"","title":"Form Handling"},{"location":"features/merge/","text":"","title":"Merging Documents"},{"location":"features/serializing/","text":"","title":"Controlling the Serializing"},{"location":"features/transformation/","text":"","title":"Applying Transformations"},{"location":"features/view-model/","text":"","title":"View Model Rendering"},{"location":"migrate/templado4/","text":"","title":"Templado 4.x"}]}